#!/usr/bin/env ruby

require 'bibtexJournalConverter'
require 'optparse'

# Specify command line interface.
options = {}
options[:shorten] == false       ## @yeban how can this be merged with the real parsing?
options[:removeDots] == false
optspec = OptionParser.new do |opts|
  opts.banner = 'Usage: bibtexJournalConverter [options] references.bib'

  # Print help if invoked with '-h' or '--help'.
  opts.on('-h', '--help', 'Print help.') do
    puts opts
    exit
  end

  # TODO:
  #   Describe other options. It's advised to only collect the parsed options
  #   in the 'options' Hash here, and not act on them.
  #
  # NOTE:
  #   Options can be parsed as Integer, Float, Array, or String (default) as
  #   per your requirement. All options need not have a short and a long form.
  #   For example, -h is short form and --help is long form for help. Official
  #   documentation has a good reference example:
  #   http://ruby-doc.org/stdlib-2.2.0/libdoc/optparse/rdoc/OptionParser.html

  # A yes/no option.
  opts.on('--version') {|o| options[:version] = o}
  opts.on('--shorten',  help="default: use long journal titles") {|o| options[:shorten] = o}
  opts.on('--remove-dots',  help="default: dots stay - only valid when --shorten is used ") {|o| options[:removeDots] = o} 
## @yeban I tried this opts.on('--shorten',  action="store_true", dest="shorten", default=False, help="default: use long journal titles")

  # An option that takes a value.
  opts.on('--abbreviation-files=journal_abbreviations_lifescience.txt,myotherfile.txt') {|o| options[:abbreviation_files] = o.split(",")}
end

# Print help if no arguments given.
if ARGV.empty?
  puts optspec
  exit
end

# Parse command line as per specification.
begin
  optspec.order!
rescue OptionParser::InvalidOption => e
  STDERR.puts e
  exit
end

# Remaining arguments on the command line can be accessed from ARGV array.
#
# If your bibtexJournalConverter was invoked as "bibtexJournalConverter -a -b -c ~/foo", ARGV will be ['~/foo'].
files = ARGV.dup
if files.length != 1  #only 1 bib
  puts optspec
  exit
end

allfiles = (files.push(options[:abbreviation_files])).flatten
allfiles.each do |file|
  f = File.expand_path file
  unless File.file?(f) && !File.zero?(f) && File.readable?(f)
    STDERR.puts "File '#{file}' not useable (does not exist or is not a file"
    STDERR.puts 'or is not readable or is empty).'
    exit!
  end
end

# Some options do not require the entire bibtexJournalConverter to be initialised. For instance,
# displaying version number.
if options[:version]
  puts Bibtexjournalconverter.version
  exit
end

# Initialize bibtexJournalConverter object with the parsed options, and run.
bibtexJournalConverter = Bibtexjournalconverter.new(files, options)
bibtexJournalConverter.run
