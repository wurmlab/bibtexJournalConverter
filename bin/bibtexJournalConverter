#!/usr/bin/env ruby

require 'bibtexJournalConverter'
require 'optparse'

APP_DIR = File.expand_path(File.join(File.dirname(__FILE__), '..'))

# Specify command line interface.
options = {}
options[:abbreviation_files] = Dir["#{APP_DIR}/info/*"]
optspec = OptionParser.new do |opts|
  opts.banner = 'Usage: bibtexJournalConverter [options] references.bib'

  # Print help if invoked with '-h' or '--help'.
  opts.on('-h', '--help', 'Print help.') do
    puts opts
    exit
  end

  # TODO:
  #   Describe other options. It's advised to only collect the parsed options
  #   in the 'options' Hash here, and not act on them.
  #
  # NOTE:
  #   Options can be parsed as Integer, Float, Array, or String (default) as
  #   per your requirement. All options need not have a short and a long form.
  #   For example, -h is short form and --help is long form for help. Official
  #   documentation has a good reference example:
  #   http://ruby-doc.org/stdlib-2.2.0/libdoc/optparse/rdoc/OptionParser.html

  # A yes/no option.
  opts.on('--version') { |o| options[:version] = o }
  opts.on('--shorten',  'default: use long journal titles') { |o| options[:shorten] = o }

  opts.on('--remove-dots',
          'When shortening, use this option to remove dots from the shortened' \
          'names. When expanding, use this option if the short names in your'  \
          ' bib do not have dots.') { |o| options[:remove_dots] = o }

  opts.on('--include-abbreviation-files x,y,z',
          'Comma separated list of abbreviation files. These are appeneded to' \
          ' the internal database of abbreviations contained in info/.',
          Array) { |o| options[:abbreviation_files].concat(o) }

  opts.on('--replace-abbreviation-files x,y,z',
          'Comma separated list of abbreviation files. These are used instead' \
          ' of the internal database of abbreviations contained in info/.',
          Array) { |o| options[:abbreviation_files] = o }
end

# Print help if no arguments given.
if ARGV.empty?
  puts optspec
  exit
end

# Parse command line as per specification.
begin
  optspec.order!
rescue OptionParser::InvalidOption => e
  STDERR.puts e
  exit
end

# Remaining arguments on the command line can be accessed from ARGV array.
#
# If your bibtexJournalConverter was invoked as "bibtexJournalConverter -a -b -c ~/foo", ARGV will be ['~/foo'].
files = ARGV.dup
if files.length != 1  #only 1 bib
  puts optspec
  exit
end

allfiles = files + options[:abbreviation_files]
allfiles.each do |file|
  f = File.expand_path file
  unless File.file?(f) && !File.zero?(f) && File.readable?(f)
    STDERR.puts "File '#{file}' not useable (does not exist or is not a file"
    STDERR.puts 'or is not readable or is empty).'
    exit!
  end
end

# Some options do not require the entire bibtexJournalConverter to be initialised. For instance,
# displaying version number.
if options[:version]
  puts Bibtexjournalconverter.version
  exit
end

# Initialize bibtexJournalConverter object with the parsed options, and run.
bibtexJournalConverter = Bibtexjournalconverter.new(files, options)
bibtexJournalConverter.run
